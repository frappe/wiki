(function () {
	'use strict';

	frappe.provide('frappe.ui.keys');

	var shortcut_groups = new WeakMap();
	var shortcut_group_list = [];
	frappe.ui.keys.shortcut_groups = shortcut_groups;

	frappe.ui.keys.get_shortcut_group = function (parent) {
		// parent must be an object
		if (!shortcut_groups.has(parent)) {
			shortcut_groups.set(parent, new frappe.ui.keys.AltShortcutGroup());
		}
		return shortcut_groups.get(parent);
	};

	var listener_added = false;
	var $current_dropdown = null;
	var $body = $(document.body);

	frappe.ui.keys.bind_shortcut_group_event = function () {
		if (listener_added) { return; }
		listener_added = true;

		function highlight_alt_shortcuts() {
			if ($current_dropdown) {
				$current_dropdown.addClass('alt-pressed');
				$body.removeClass('alt-pressed');
			} else {
				$body.addClass('alt-pressed');
				$current_dropdown && $current_dropdown.removeClass('alt-pressed');
			}
		}

		function unhighlight_alt_shortcuts() {
			$current_dropdown && $current_dropdown.removeClass('alt-pressed');
			$body.removeClass('alt-pressed');
		}

		$(document).on('keydown', function (e) {
			var key = (frappe.ui.keys.key_map[e.which] || '').toLowerCase();

			if (key === 'alt') {
				highlight_alt_shortcuts();
			}

			if (e.shiftKey || e.ctrlKey || e.metaKey) {
				return;
			}

			if (key && e.altKey) {
				var shortcut = get_shortcut_for_key(key);
				if (shortcut) {
					e.preventDefault();
					shortcut.$target[0].click();
				}
				highlight_alt_shortcuts();
			}
		});
		$(document).on('keyup', function (e) {
			if (e.key === 'Alt') {
				unhighlight_alt_shortcuts();
			}
		});
		$(document).on('mousemove', function () {
			unhighlight_alt_shortcuts();
		});
	};

	function get_shortcut_for_key(key) {
		// Get the shortcut for combination of alt+key
		// Priority 1: Open dropdown
		// Priority 2: Current Page

		var shortcuts = shortcut_group_list
			.filter(function (shortcut_group) { return key in shortcut_group.shortcuts_dict; })
			.map(function (shortcut_group) { return shortcut_group.shortcuts_dict[key]; })
			.filter(function (shortcut) { return shortcut.$target.is(':visible'); });

		var shortcut = null;

		if ($current_dropdown && $current_dropdown.is('.open')) {
			shortcut = shortcuts.find(
				function (shortcut) { return $.contains($current_dropdown[0], shortcut.$target[0]); }
			);
		}

		if (shortcut) { return shortcut; }

		shortcut = shortcuts.find(
			function (shortcut) { return $.contains(window.cur_page.page.page.wrapper[0], shortcut.$target[0]); }
		);

		return shortcut;
	}

	frappe.ui.keys.AltShortcutGroup = class AltShortcutGroup {
		constructor() {
			this.shortcuts_dict = {};
			$current_dropdown = null;
			this.bind_events();
			frappe.ui.keys.bind_shortcut_group_event();
			shortcut_group_list.push(this);
		}

		bind_events() {
			$(document).on('show.bs.dropdown', function (e) {
				$current_dropdown && $current_dropdown.removeClass('alt-pressed');
				var $target = $(e.target);
				if ($target.is('.dropdown, .btn-group')) {
					$current_dropdown = $target;
				}
			});
			$(document).on('hide.bs.dropdown', function () {
				$current_dropdown && $current_dropdown.removeClass('alt-pressed');
				$current_dropdown = null;
			});
		}

		add($target, $text_el) {
			var this$1 = this;

			if (!$text_el) {
				$text_el = $target;
			}
			var text_content = $text_el.text().trim();
			var letters = text_content.split('');
			// first unused letter
			var shortcut_letter = letters.find(function (letter) {
				letter = letter.toLowerCase();
				var is_valid_char = letter >= 'a' && letter <= 'z';
				return !this$1.is_taken(letter) && is_valid_char;
			});
			if (!shortcut_letter) {
				$text_el.attr('data-label', text_content);
				return;
			}
			for (var key in this.shortcuts_dict) {
				var shortcut$1 = this.shortcuts_dict[key];
				if (shortcut$1.text === text_content) {
					shortcut$1.$target = $target;
					shortcut$1.$text_el = $text_el;
					this.underline_text(shortcut$1);
					return;
				}
			}

			var shortcut = {
				$target: $target,
				$text_el: $text_el,
				letter: shortcut_letter,
				text: text_content
			};
			this.shortcuts_dict[shortcut_letter.toLowerCase()] = shortcut;
			this.underline_text(shortcut);
		}

		underline_text(shortcut) {
			shortcut.$text_el.attr('data-label', shortcut.text);
			var underline_el_found = false;
			var text_html = shortcut.text.split('').map(function (letter) {
				if (letter === shortcut.letter && !underline_el_found) {
					letter = "<span class=\"alt-underline\">" + letter + "</span>";
					underline_el_found = true;
				}
				return letter;
			}).join('');
			var original_text_html = shortcut.$text_el.html();
			text_html = original_text_html.replace(shortcut.text.trim(), text_html.trim());
			shortcut.$text_el.html(text_html);
		}

		is_taken(letter) {
			var is_in_global_shortcut = frappe.ui.keys.standard_shortcuts
				.filter(function (s) { return !s.page; })
				.some(function (s) { return s.shortcut === ("alt+" + letter); });
			return letter in this.shortcuts_dict || is_in_global_shortcut;
		}
	};

	frappe.provide('frappe.ui.keys.handlers');

	frappe.ui.keys.setup = function() {
		$(window).on('keydown', function(e) {
			var key = frappe.ui.keys.get_key(e);
			if(frappe.ui.keys.handlers[key]) {
				var out = null;
				for(var i=0, l = frappe.ui.keys.handlers[key].length; i<l; i++) {
					var handler = frappe.ui.keys.handlers[key][i];
					var _out = handler.apply(this, [e]);
					if(_out===false) {
						out = _out;
					}
				}
				return out;
			}
		});
	};

	var standard_shortcuts = [];
	frappe.ui.keys.standard_shortcuts = standard_shortcuts;
	frappe.ui.keys.add_shortcut = function (ref) {
		if ( ref === void 0 ) ref = {};
		var shortcut = ref.shortcut;
		var action = ref.action;
		var description = ref.description;
		var page = ref.page;
		var target = ref.target;
		var condition = ref.condition;
		var ignore_inputs = ref.ignore_inputs; if ( ignore_inputs === void 0 ) ignore_inputs = false;

		if (target instanceof jQuery) {
			var $target = target;
			action = function () {
				$target[0].click();
			};
		}
		if (!condition) {
			condition = function () { return true; };
		}
		var handler = function (e) {
			var $focused_element = $(document.activeElement);
			var is_input_focused = $focused_element.is('input, select, textarea, [contenteditable=true]');
			if (is_input_focused && !ignore_inputs) { return; }
			if (!condition()) { return; }

			if (!page || page.wrapper.is(':visible')) {
				var prevent_default = action(e);
				// prevent default if true is explicitly returned
				// or nothing returned (undefined)
				if (prevent_default || prevent_default === undefined) {
					e.preventDefault();
				}
			}
		};
		// monkey patch page to handler
		handler.page = page;
		// remove handler with the same page attached to it
		frappe.ui.keys.off(shortcut, page);
		// attach new handler
		frappe.ui.keys.on(shortcut, handler);

		// update standard shortcut list
		var existing_shortcut_index = standard_shortcuts.findIndex(
			function (s) { return s.shortcut === shortcut; }
		);
		var new_shortcut = { shortcut: shortcut, action: action, description: description, page: page, condition: condition };
		if (existing_shortcut_index === -1) {
			standard_shortcuts.push(new_shortcut);
		} else {
			standard_shortcuts[existing_shortcut_index] = new_shortcut;
		}
	};

	frappe.ui.keys.show_keyboard_shortcut_dialog = function () {
		if (frappe.ui.keys.is_dialog_shown) { return; }

		var global_shortcuts = standard_shortcuts.filter(function (shortcut) { return !shortcut.page; });
		var current_page_shortcuts = standard_shortcuts.filter(
			function (shortcut) { return shortcut.page && shortcut.page === window.cur_page.page.page; });

		function generate_shortcuts_html(shortcuts, heading) {
			if (!shortcuts.length) {
				return '';
			}
			var html = shortcuts
				.filter(function (s) { return s.condition ? s.condition() : true; })
				.map(function (shortcut) {
					var shortcut_label = shortcut.shortcut
						.split('+')
						.map(frappe.utils.to_title_case)
						.join('+');
					if (frappe.utils.is_mac()) {
						shortcut_label = shortcut_label.replace('Ctrl', 'âŒ˜');
					}
					return ("<tr>\n\t\t\t\t\t<td width=\"40%\"><kbd>" + shortcut_label + "</kbd></td>\n\t\t\t\t\t<td width=\"60%\">" + (shortcut.description || '') + "</td>\n\t\t\t\t</tr>");
				}).join('');
			html = "<h5 style=\"margin: 0;\">" + heading + "</h5>\n\t\t\t<table style=\"margin-top: 10px;\" class=\"table table-bordered\">\n\t\t\t\t" + html + "\n\t\t\t</table>";
			return html;
		}

		var global_shortcuts_html = generate_shortcuts_html(global_shortcuts, __('Global Shortcuts'));
		var current_page_shortcuts_html = generate_shortcuts_html(current_page_shortcuts, __('Page Shortcuts'));

		var dialog = new frappe.ui.Dialog({
			title: __('Keyboard Shortcuts'),
			on_hide: function on_hide() {
				frappe.ui.keys.is_dialog_shown = false;
			}
		});

		dialog.$body.append(global_shortcuts_html);
		dialog.$body.append(current_page_shortcuts_html);
		dialog.$body.append(("\n\t\t<div class=\"text-muted\">\n\t\t\t" + (__('Press Alt Key to trigger additional shortcuts in Menu and Sidebar')) + "\n\t\t</div>\n\t"));

		dialog.show();
		frappe.ui.keys.is_dialog_shown = true;
	};

	frappe.ui.keys.get_key = function(e) {
		var keycode = e.keyCode || e.which;
		var key = frappe.ui.keys.key_map[keycode] || String.fromCharCode(keycode);

		if(e.ctrlKey || e.metaKey) {
			// add ctrl+ the key
			key = 'ctrl+' + key;
		}
		if(e.shiftKey) {
			// add ctrl+ the key
			key = 'shift+' + key;
		}
		if (e.altKey) {
			// add alt+ the key
			key = 'alt+' + key;
		}
		if (e.altKey && e.ctrlKey) {
			// add alt+ctrl+ the key or single key e.g f1,f2,etc..
			return key.toLowerCase();
		}
		return key.toLowerCase();
	};

	frappe.ui.keys.on = function(key, handler) {
		if(!frappe.ui.keys.handlers[key]) {
			frappe.ui.keys.handlers[key] = [];
		}
		frappe.ui.keys.handlers[key].push(handler);
	};

	frappe.ui.keys.off = function(key, page) {
		var handlers = frappe.ui.keys.handlers[key];
		if (!handlers || handlers.length === 0) { return; }
		frappe.ui.keys.handlers[key] = handlers.filter(function (h) {
			if (!page) { return false; }
			return h.page !== page;
		});
	};

	frappe.ui.keys.add_shortcut({
		shortcut: 'ctrl+s',
		action: function(e) {
			frappe.app.trigger_primary_action();
			e.preventDefault();
			return false;
		},
		description: __('Trigger Primary Action'),
		ignore_inputs: true
	});

	frappe.ui.keys.add_shortcut({
		shortcut: 'ctrl+g',
		action: function(e) {
			$("#navbar-search").focus();
			e.preventDefault();
			return false;
		},
		description: __('Open Awesomebar')
	});

	frappe.ui.keys.add_shortcut({
		shortcut: 'ctrl+h',
		action: function(e) {
			e.preventDefault();
			$('.navbar-home img').click();
		},
		description: __('Navigate Home')
	});

	frappe.ui.keys.add_shortcut({
		shortcut: 'alt+s',
		action: function(e) {
			e.preventDefault();
			$('.dropdown-navbar-user a').eq(0).click();
		},
		description: __('Open Settings')
	});

	frappe.ui.keys.add_shortcut({
		shortcut: 'shift+/',
		action: function() {
			frappe.ui.keys.show_keyboard_shortcut_dialog();
		},
		description: __('Show Keyboard Shortcuts')
	});

	frappe.ui.keys.add_shortcut({
		shortcut: 'alt+h',
		action: function(e) {
			e.preventDefault();
			$('.dropdown-help a').eq(0).click();
		},
		description: __('Open Help')
	});

	frappe.ui.keys.on('escape', function(e) {
		close_grid_and_dialog();
	});

	frappe.ui.keys.on('esc', function(e) {
		close_grid_and_dialog();
	});

	frappe.ui.keys.on('enter', function(e) {
		if(window.cur_dialog && cur_dialog.confirm_dialog) {
			cur_dialog.get_primary_btn().trigger('click');
		}
	});

	frappe.ui.keys.on('ctrl+down', function(e) {
		var grid_row = frappe.ui.form.get_open_grid_form();
		grid_row && grid_row.toggle_view(false, function() { grid_row.open_next(); });
	});

	frappe.ui.keys.on('ctrl+up', function(e) {
		var grid_row = frappe.ui.form.get_open_grid_form();
		grid_row && grid_row.toggle_view(false, function() { grid_row.open_prev(); });
	});

	frappe.ui.keys.add_shortcut({
		shortcut: 'shift+ctrl+r',
		action: function() {
			frappe.ui.toolbar.clear_cache();
		},
		description: __('Clear Cache and Reload')
	});

	frappe.ui.keys.key_map = {
		8: 'backspace',
		9: 'tab',
		13: 'enter',
		16: 'shift',
		17: 'ctrl',
		91: 'meta',
		18: 'alt',
		27: 'escape',
		37: 'left',
		39: 'right',
		38: 'up',
		40: 'down',
		32: 'space',
		112: 'f1',
		113: 'f2',
		114: 'f3',
		115: 'f4',
		116: 'f5',
		191: '/',
		188: '<',
		190: '>'
	};

	'abcdefghijklmnopqrstuvwxyz'.split('').forEach(function (letter, i) {
		frappe.ui.keys.key_map[65 + i] = letter;
	});

	// keyCode map
	frappe.ui.keyCode = {
		ESCAPE: 27,
		LEFT: 37,
		RIGHT: 39,
		UP: 38,
		DOWN: 40,
		ENTER: 13,
		TAB: 9,
		SPACE: 32,
		BACKSPACE: 8
	};

	function close_grid_and_dialog() {
		// close open grid row
		var open_row = $(".grid-row-open");
		if (open_row.length) {
			var grid_row = open_row.data("grid_row");
			grid_row.toggle_view(false);
			return false;
		}

		// close open dialog
		if (cur_dialog && !cur_dialog.no_cancel_flag) {
			cur_dialog.cancel();
			return false;
		}
	}

	// blur when escape is pressed on dropdowns
	$(document).on('keydown', '.dropdown-toggle', function (e) {
		if (e.which === frappe.ui.keyCode.ESCAPE) {
			$(e.currentTarget).blur();
		}
	});

	window.EditAsset = class EditAsset {
	  constructor(opts) {
	    console.log('checko');
	    this.edited_files = {};
	    this.make_code_field_group();
	    this.render_preview();
	    this.add_attachment_handler();
	    this.set_listeners();
	    this.create_comment_box();
	  }

	  render_preview() {
	    var this$1 = this;


	    $('a[data-toggle="tab"]').on("shown.bs.tab", function (e) {
	      var activeTab = $(e.target);

	      if (
	        activeTab.prop("id") === "preview-tab" ||
	        activeTab.prop("id") === "diff-tab"
	      ) {
	        var content = $("textarea#content").val();
	        var $preview = $(".wiki-preview");
	        var $diff = $(".wiki-diff");
	        if (!this$1.code_field_group.get_value("code")) {
	          $preview.html("<div>Please select a route</div>");
	          $diff.html("<div>Please select a route</div>");
	          return;
	        }
	        $preview.html("Loading preview...");
	        $diff.html("Loading diff...");
	        frappe.call({
	          method: "wiki.wiki.doctype.wiki_page.wiki_page.preview",
	          args: {
	            content: this$1.code_field_group.get_value("code"),
	            path: this$1.route,
	            name: $('[name="wiki_page"]').val(),
	            attachments: this$1.attachments,
	            new: $('[name="new"]').val(),
	          },
	          callback: function (r) {
	            if (r.message) {
	              $preview.html(r.message.html);
	              if ($('[name="new"]').val()){
	                $diff.html(r.message.diff);
	              }
	            }
	          },
	        });
	      }
	    });
	  }

	  make_edit_field_group() {
	    var route = $("#route").val();
	    this.edit_field_group = new frappe.ui.FieldGroup({
	      fields: [
	        {
	          label: __("Route Link"),
	          fieldname: "route_link",
	          fieldtype: "Data",
	          default: route || "",
	          hidden: 1,
	        } ],
	      body: $(".routedisp"),
	    });
	    this.edit_field_group.make();
	  }

	  make_code_field_group() {
	    this.code_field_group = new frappe.ui.FieldGroup({
	      fields: [
	        {
	          label: __("Edit Code"),
	          fieldname: "code",
	          fieldtype: "Code",
	          columns: 4,
	          reqd: 1,
	          default: $('#content').val(),
	          options: "Markdown",
	        } ],
	      body: $(".wiki-write").get(0),
	    });
	    this.code_field_group.make();
	  }

	  update_code(from_disk) {
	    var this$1 = this;
	    if ( from_disk === void 0 ) from_disk = false;

	    var route = this.edit_field_group.get_value("route_link");
	    if (this.route)
	      { this.edited_files[this.route] = this.code_field_group.get_value("code"); }
	    if (route === this.route && !from_disk) { return; }
	    if (route in this.edited_files && !from_disk) {
	      this.route = route;
	      this.code_field_group
	        .get_field("code")
	        .set_value(this.edited_files[route]);
	      this.build_file_table();
	      return;
	    }
	    frappe.call({
	      method: "edit_docs.www.edit.get_code",
	      args: { route: route },
	      callback: function (r) {
	        this$1.route = route;
	        this$1.code_field_group.get_field("code").set_value(r.message);
	        this$1.build_file_table();
	      },
	    });
	  }
	  make_submit_section_field_group() {
	    var this$1 = this;

	    this.submit_section_field_group = new frappe.ui.FieldGroup({
	      fields: [
	        {
	          label: __("Submit"),
	          fieldname: "submit_button",
	          fieldtype: "Button",
	          primary: 1,
	          btn_size: "lg",
	          reqd: 1,
	          click: function () { return this$1.raise_patch(); },
	        } ],
	      body: $(".submit-section"),
	    });
	    this.submit_section_field_group.make();
	  }

	  raise_patch() {

	    var me =this;
	    var submit_dialog = frappe.ui.di;



	    var dfs = [];
	        dfs.push({
	          fieldname: "edit_message",
	          fieldtype: "Text",
	        });
	    
	    var dialog = new frappe.ui.Dialog({
	      fields: dfs,
	      title: __("Please add a message explaining your change"),
	      primary_action: function () {
	        console.log(this.get_value("edit_message"));
	        frappe.call({
	          method: "wiki.wiki.doctype.wiki_page.wiki_page.update",
	          args: {
	            name: $('[name="wiki_page"]').val(),
	            wiki_page_patch: $('[name="wiki_page_patch"]').val(),
	            message: this.get_value("edit_message"),
	            content: me.code_field_group.get_value("code"),
	            attachments: me.attachments,
	            new: $('[name="new"]').val(),
	            title: $('[name="title_of_page"]').val()

	          },
	          callback: function (r) {
	            frappe.show_alert(
	              "A Change Request has been generated. You can track your requests here after a few mins",
	              5
	            );
	            window.location.href = "/contributions";
	          },
	        });

	        this.hide();
	      },
	    });
	    dialog.show();





	   
	  }

	  add_attachment_handler() {
	    var me = this;
	    $(".add-attachment").click(function () {
	      me.new_attachment();
	    });
	    $(".submit").click(function () {
	      me.raise_patch();
	    });
	  }

	  new_attachment(fieldname) {
	    var this$1 = this;

	    if (this.dialog) {
	      // remove upload dialog
	      this.dialog.$wrapper.remove();
	    }

	    new frappe.ui.FileUploader({
	      folder: "Home/Attachments",
	      on_success: function (file_doc) {
	        if (!this$1.attachments) { this$1.attachments = []; }
	        if (!this$1.save_paths) { this$1.save_paths = {}; }
	        this$1.attachments.push(file_doc);
	        this$1.build_attachment_table();
	      },
	    });
	  }

	  build_attachment_table() {
	    var wrapper = $(".wiki-attachment");
	    wrapper.empty();

	    var table = $(
	      ("<table class=\"table table-bordered attachment-table\" style=\"cursor:pointer; margin:0px;\">\n        <thead>\n        \t<tr>\n            <th style=\"width: 30%\">' " + (__("File Name")) + "</th>\n            <th style=\"width: 50%\">" + (__("Use this Url")) + " </th>\n            <th>" + (__("Actions")) + " </th>\n          </tr>\n        </thead>\n        <tbody></tbody>\n      </table>")
	    ).appendTo(wrapper);

	    this.attachments.forEach(function (f) {
	      var row = $("<tr></tr>").appendTo(table.find("tbody"));
	      $(("<td>" + (f.file_name) + "</td>")).appendTo(row);
	      $(("<td>" + (f.file_url) + "</td>")).appendTo(
	        row
	      );
	      $(("<td>\n          <a class=\"btn btn-default btn-xs center delete-button\"  data-name = \"" + (f.file_name) + "\" >\n\t\t\t\t    Delete\n\t\t\t    </a>\n        </td>")).appendTo(row);
	    });

	    // table.on("click", () => this.table_click_handler());
	  }

	  set_listeners() {
	    var me = this;
	    $(" .wiki-attachment ").on("click", ".edit-button", function () {
	      var this$1 = this;

	      var dfs = [];
	      me.attachments.forEach(function (f) {
	        if (f.file_name == $(this$1).attr("data-name")) {
	          dfs.push({
	            fieldname: f.file_name,
	            fieldtype: "Data",
	            label: f.file_name,
	          });
	        }
	      });
	      var dialog = new frappe.ui.Dialog({
	        fields: dfs,
	        title: __("Add path where this file should be saved."),
	        primary_action: function () {
	          var values = this.get_values();
	          if (values) {
	            this.hide();
	            me.attachments.forEach(function (f) {
	              f.save_path = values[f.file_name];
	              me.save_paths[f.file_name] = values[f.file_name];
	            });
	            me.build_attachment_table();
	          }
	        },
	      });
	      dialog.show();
	      dialog.set_values(me.save_paths);
	    });

	    $(" .wiki-attachment ").on("click", ".delete-button", function () {
	      var this$1 = this;

	      frappe.confirm(
	        ("Are you sure you want to delete the file \"" + ($(this).attr(
	          "data-name"
	        )) + "\""),
	        function () {
	          // action to perform if Yes is selected
	          me.attachments.forEach(function (f, index, object) {
	            if (f.file_name == $(this$1).attr("data-name")) {
	              object.splice(index, 1);
	            }
	            me.build_attachment_table();
	          });
	        }
	      );
	    });

	    $(" .wiki-files ").on("click", ".delete-button", function () {
	      var this$1 = this;

	      frappe.confirm(
	        ("Are you sure you want to reset changes for this route \"" + ($(this).attr(
	          "data-name"
	        )) + "\""),
	        function () {
	          // action to perform if Yes is selected

	          delete me.edited_files[$(this$1).attr("data-name")];
	          me.build_file_table();
	        }
	      );
	    });

	    $(" .wiki-files ").on("click", ".edit-button", function () {
	      // action to perform if Yes is selected

	      me.edit_field_group
	        .get_field("route_link")
	        .set_value($(this).attr("data-name"))
	        .then(function () {
	          me.update_code();
	          $("#write-tab").addClass("active");
	          $("#files-tab").removeClass("active");
	          $("#write").addClass("show active");
	          $("#files").removeClass("show active");
	        });
	    });
	  }

	  build_file_table() {
	    var wrapper = $(".wiki-files");
	    wrapper.empty();
	    var table = $(
	      '<table class="table table-bordered" style="cursor:pointer; margin:0px;"><thead>\
	<tr><th>' +
	        __("Route") +
	        "</th><th>" +
	        __("Actions") +
	        "</th></tr>\
	</thead><tbody></tbody></table>"
	    ).appendTo(wrapper);

	    for (var file in this.edited_files) {
	      var row = $("<tr></tr>").appendTo(table.find("tbody"));
	      $("<td>" + file + "</td>").appendTo(row);
	      $(("<td>\n      <a class=\"btn btn-default btn-xs center edit-button\"  data-name = \"" + file + "\" >\n        Edit\n      </a>\n      &nbsp&nbsp\n      <a class=\"btn btn-default btn-xs center delete-button\"  data-name = \"" + file + "\" >\n        Delete\n      </a>\n    </td>")).appendTo(row);
	    }
	    if (!(this.route in this.edited_files)) {
	      var row$1 = $("<tr></tr>").appendTo(table.find("tbody"));
	      $("<td>" + this.route + "</td>").appendTo(row$1);
	      $(("<td>\n      <a class=\"btn btn-default btn-xs center edit-button\"  data-name = \"" + (this.route) + "\" >\n        Edit\n      </a>\n      &nbsp&nbsp\n      <a class=\"btn btn-default btn-xs center delete-button\"  data-name = \"" + (this.route) + "\" >\n        Delete\n      </a>\n    </td>")).appendTo(row$1);
	    }
	  }

	  create_comment_box() {
	     var this$1 = this;

	     this.comment_box = frappe.ui.form.make_control({
	      parent: $('.comment-box'),
	      df: {
	          fieldname: 'new_comment',
	          fieldtype: 'Comment'
	      },
	      enable_mentions: false,
	      render_input: true,
	      only_input: true,
	      on_submit: function (comment) {

					if (strip_html(comment).trim() != "") {
	          this$1.comment_box.disable();


	          frappe.call({
	            method: "wiki.wiki.doctype.wiki_page_patch.wiki_page_patch.add_comment_to_patch",
	            args: {
	              reference_name: $('[name="wiki_page_patch"]').val(),
	              content: comment,
	              comment_email: frappe.session.user,
	              comment_by: frappe.session.user_fullname
	            },
	            callback: function (r) {
	              comment = r.message;
	              if (comment) {
	                console.log(comment);
	                this$1.comment_box.set_value('');

	                
	                var new_comment = $(("\n                  <div class=\"timeline-item\">\n                    <div class=\"timeline-badge\">\n                      <svg class=\"icon icon-md\">\n                        <use href=\"#icon-small-message\"></use>\n                      </svg>\n                    </div>\n                    <div class=\"timeline-content frappe-card\">\n                      <div class=\"timeline-message-box\">\n                        <span class=\"flex justify-between\">\n                          <span class=\"text-color flex\">\n                            <span>\n                              " + (comment.owner) + "\n                              <span class=\"text-muted margin-left\">\n                                <span class=\"frappe-timestamp \"\n                                  data-timestamp=\"" + (comment.creation) + "\"\n                                  title=\"" + (comment.creation) + "\">" + (comment.timepassed) + "</span>\n                              </span>\n                            </span>\n                          </span>\n                        </span>\n                        <div class=\"content\">\n                          " + (comment.content) + "\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                "));

	                $(".timeline-items").prepend(new_comment);

	              }
	            },
	            always: function () {
	              this$1.comment_box.enable();

	            }
	          });
					}
				}
	  });
	  }
	};



	//   setup_search(target, search_scope) {
	//     if (typeof target === "string") {
	//       target = $(target);
	//     }

	//     let $search_input = $(`<div class="dropdown" id="dropdownMenuSearch">
	// 			<input type="search" class="form-control" placeholder="Search the docs (Press / to focus)" />
	// 			<div class="overflow-hidden shadow dropdown-menu w-100" aria-labelledby="dropdownMenuSearch">
	// 			</div>
	// 			<div class="search-icon">
	// 				<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24"
	// 					fill="none"
	// 					stroke="currentColor" stroke-width="2" stroke-linecap="round"
	// 					stroke-linejoin="round"
	// 					class="feather feather-search">
	// 					<circle cx="11" cy="11" r="8"></circle>
	// 					<line x1="21" y1="21" x2="16.65" y2="16.65"></line>
	// 				</svg>
	// 			</div>
	// 		</div>`);

	//     target.empty();
	//     $search_input.appendTo(target);

	//     // let $dropdown = $search_input.find('.dropdown');
	//     let $dropdown_menu = $search_input.find(".dropdown-menu");
	//     let $input = $search_input.find("input");
	//     let dropdownItems;
	//     let offsetIndex = 0;

	//     $(document).on("keypress", (e) => {
	//       if ($(e.target).is("textarea, input, select")) {
	//         return;
	//       }
	//       if (e.key === "/") {
	//         e.preventDefault();
	//         $input.focus();
	//       }
	//     });

	//     $input.on(
	//       "input",
	//       frappe.utils.debounce(() => {
	//         if (!$input.val()) {
	//           clear_dropdown();
	//           return;
	//         }

	//         frappe
	//           .call({
	//             method: "frappe.search.web_search",
	//             args: {
	//               scope: search_scope || null,
	//               query: $input.val(),
	//               limit: 5,
	//             },
	//           })
	//           .then((r) => {
	//             let results = r.message || [];
	//             let dropdown_html;
	//             if (results.length == 0) {
	//               dropdown_html = `<div class="dropdown-item">No results found</div>`;
	//             } else {
	//               dropdown_html = results
	//                 .map((r) => {
	//                   return `<a class="dropdown-item" data-name="/${r.path}">
	// 						<h6>${r.title_highlights || r.title}</h6>
	// 						<div style="white-space: normal;">${r.content_highlights}</div>
	// 					</a>`;
	//                 })
	//                 .join("");
	//             }
	//             $dropdown_menu.html(dropdown_html);
	//             $dropdown_menu.addClass("show");
	//             dropdownItems = $dropdown_menu.find(".dropdown-item");

	//             var me = this;
	//             $dropdown_menu.on("click", `.dropdown-item`, function () {
	//               var dfs = [];
	//               console.log($(this).attr("data-name"));
	//               me.edit_field_group
	//                 .get_field("route_link")
	//                 .set_value($(this).attr("data-name"))
	//                 .then(() => {
	//                   me.update_code();
	//                   $("#write-tab").addClass("active");
	//                   $("#files-tab").removeClass("active");
	//                   $("#write").addClass("show active");
	//                   $("#files").removeClass("show active");
	//                 });
	//               clear_dropdown();
	//             });
	//           });
	//       }, 500)
	//     );

	//     $input.on("focus", () => {
	//       if (!$input.val()) {
	//         clear_dropdown();
	//       } else {
	//         $input.trigger("input");
	//       }
	//     });

	//     $input.keydown(function (e) {
	//       // up: 38, down: 40
	//       if (e.which == 40) {
	//         navigate(0);
	//       }
	//     });

	//     $dropdown_menu.keydown(function (e) {
	//       // up: 38, down: 40
	//       if (e.which == 38) {
	//         navigate(-1);
	//       } else if (e.which == 40) {
	//         navigate(1);
	//       } else if (e.which == 27) {
	//         setTimeout(() => {
	//           clear_dropdown();
	//         }, 300);
	//       }
	//     });

	//     // Clear dropdown when clicked
	//     $(window).click(function () {
	//       clear_dropdown();
	//     });

	//     $search_input.click(function (event) {
	//       event.stopPropagation();
	//     });

	//     // Navigate the list
	//     var navigate = function (diff) {
	//       offsetIndex += diff;

	//       if (offsetIndex >= dropdownItems.length) offsetIndex = 0;
	//       if (offsetIndex < 0) offsetIndex = dropdownItems.length - 1;
	//       $input.off("blur");
	//       dropdownItems.eq(offsetIndex).focus();
	//     };

	//     function clear_dropdown() {
	//       offsetIndex = 0;
	//       $dropdown_menu.html("");
	//       $dropdown_menu.removeClass("show");
	//       dropdownItems = undefined;
	//     }

	//     // Remove focus state on hover
	//     $dropdown_menu.mouseover(function () {
	//       dropdownItems.blur();
	//     });
	//   }
	// }

	// let ismdwn = 0
	// rpanrResize.addEventListener('mousedown', mD)

	// function mD(event) {
	//   ismdwn = 1
	//   document.body.addEventListener('mousemove', mV)
	//   document.body.addEventListener('mouseup', end)
	// }

	// function mV(event) {
	//   if (ismdwn === 1) {
	//     pan1.style.flexBasis = event.clientX + "px"
	//   } else {
	//     end()
	//   }
	// }
	// const end = (e) => {
	//   ismdwn = 0
	//   document.body.removeEventListener('mouseup', end)
	//   rpanrResize.removeEventListener('mousemove', mV)
	// }




	// var edit  = new EditAsset();

}());
//# sourceMappingURL=wiki.min.js.map
